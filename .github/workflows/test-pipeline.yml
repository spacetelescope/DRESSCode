name: "Main: Docker images & run pipeline"

on:
  push:
    branches:
      - main
  # pull_request:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Cache Raw_data
        id: cache-test-images
        uses: actions/cache@v2
        with:
          path: ~/Raw_data
          key: NGC0628-test-raw-data-${{ hashFiles('tests/download_test_data.bash') }}

      - name: Download Data
        if: steps.cache-test-images.outputs.cache-hit != 'true'
        run: |
          mkdir ~/Raw_data
          bash tests/download_test_data.bash ~/Raw_data

      - name: Build the dependency Docker image
        if: github.ref == 'refs/heads/main'
        run: docker build --tag dresscodeswift/heasoft-caldb-wcstools:latest -f Docker/heasoft-caldb-wcstools.dockerfile .

      - name: Build the DRESSCode Docker image
        run: docker build --tag dresscodeswift/dresscode:latest -f Docker/dockerfile .

      - name: Run the pipeline
        run: |
          mkdir -p ~/dresscode-data/NGC0628
          cp -r ~/Raw_data ~/dresscode-data/NGC0628/Raw_data
          chmod -R a=rwx ~/dresscode-data
          docker run --user root --rm -t -v ~/dresscode-data:/data dresscodeswift/dresscode /bin/bash /opt/dresscode/tests/test_pipeline.bash /opt/dresscode /data

      - name: Save pipeline output
        uses: actions/upload-artifact@v2
        with:
          name: final-fits
          path: |
            ~/dresscode-data/NGC0628/working_dir/*final*.fits

      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push the dependency Docker image
        if: github.ref == 'refs/heads/main'
        run: docker push dresscodeswift/heasoft-caldb-wcstools:latest

      - name: Push the DRESSCode Docker image
        if: github.ref == 'refs/heads/main'
        run: docker push dresscodeswift/dresscode:latest

      - name: Create thumbnail of pipeline output
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          pip install astropy matplotlib
          python3 tests/fits2img.py ~/dresscode-data/NGC0628/working_dir/

        # todo: replace with our own requests.post script in order to have more control over matching imgur links / filename

      - name: Publish to imgur
        if: ${{ github.event_name == 'pull_request' }}
        uses: devicons/public-upload-to-imgur@v2.2.1
        id: publish-to-imgur
        with:
          path: "*.png"
          client_id: ${{secrets.IMGUR_CLIENT_ID}}

      - name: Comment PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: unsplash/comment-on-pr@v1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: "Pipeline output (`*_final*.fits`):
            ${{ join(fromJSON(steps.publish-to-imgur.outputs.markdown_urls)) }}"
          check_for_duplicate_msg: false
          delete_prev_regex_msg: "^Final thumbnail images from pipeline: "
